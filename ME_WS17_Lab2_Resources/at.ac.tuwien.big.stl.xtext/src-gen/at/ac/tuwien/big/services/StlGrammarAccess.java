/*
 * generated by Xtext 2.12.0
 */
package at.ac.tuwien.big.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemTypesItemTypeParserRuleCall_3_0 = (RuleCall)cItemTypesAssignment_3.eContents().get(0);
		private final Assignment cAreasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAreasAreaParserRuleCall_4_0 = (RuleCall)cAreasAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//	'system' name=ID
		//	'{'
		//	itemTypes+=ItemType+
		//	areas+=Area+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID '{' itemTypes+=ItemType+ areas+=Area+ '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//itemTypes+=ItemType+
		public Assignment getItemTypesAssignment_3() { return cItemTypesAssignment_3; }
		
		//ItemType
		public RuleCall getItemTypesItemTypeParserRuleCall_3_0() { return cItemTypesItemTypeParserRuleCall_3_0; }
		
		//areas+=Area+
		public Assignment getAreasAssignment_4() { return cAreasAssignment_4; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_4_0() { return cAreasAreaParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAreaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComponentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cItemTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSystemParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//NamedElement:
		//	Area | Service | Parameter | Component | ItemType | System;
		@Override public ParserRule getRule() { return rule; }
		
		//Area | Service | Parameter | Component | ItemType | System
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Area
		public RuleCall getAreaParserRuleCall_0() { return cAreaParserRuleCall_0; }
		
		//Service
		public RuleCall getServiceParserRuleCall_1() { return cServiceParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
		
		//Component
		public RuleCall getComponentParserRuleCall_3() { return cComponentParserRuleCall_3; }
		
		//ItemType
		public RuleCall getItemTypeParserRuleCall_4() { return cItemTypeParserRuleCall_4; }
		
		//System
		public RuleCall getSystemParserRuleCall_5() { return cSystemParserRuleCall_5; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAreaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsComponentParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Assignment cConnectorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectorsConnectorParserRuleCall_4_0 = (RuleCall)cConnectorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Area:
		//	'area' name=ID
		//	'{'
		//	components+=Component*
		//	connectors+=Connector*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'area' name=ID '{' components+=Component* connectors+=Connector* '}'
		public Group getGroup() { return cGroup; }
		
		//'area'
		public Keyword getAreaKeyword_0() { return cAreaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_0() { return cComponentsComponentParserRuleCall_3_0; }
		
		//connectors+=Connector*
		public Assignment getConnectorsAssignment_4() { return cConnectorsAssignment_4; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_4_0() { return cConnectorsConnectorParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.ItemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionEStringParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//ItemType:
		//	'item' name=ID '='
		//	description=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'item' name=ID '=' description=EString
		public Group getGroup() { return cGroup; }
		
		//'item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//description=EString
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_0() { return cDescriptionEStringParserRuleCall_3_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cItemGeneratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBufferParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConveyorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMachineParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cTurnTableParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cCostAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCostEIntParserRuleCall_5_1_0 = (RuleCall)cCostAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cServicesAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cServicesServiceParserRuleCall_5_3_0 = (RuleCall)cServicesAssignment_5_3.eContents().get(0);
		private final Assignment cInputSlotsAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cInputSlotsSlotParserRuleCall_5_4_0 = (RuleCall)cInputSlotsAssignment_5_4.eContents().get(0);
		private final Assignment cOutputSlotsAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cOutputSlotsSlotParserRuleCall_5_5_0 = (RuleCall)cOutputSlotsAssignment_5_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		
		//Component:
		//	ItemGenerator | Store | Buffer | Conveyor | Machine | TurnTable
		//	cost=EInt
		//	'{'
		//	services+=Service*
		//	inputSlots+=Slot*
		//	outputSlots+=Slot*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//ItemGenerator | Store | Buffer | Conveyor | Machine | TurnTable cost=EInt '{' services+=Service* inputSlots+=Slot*
		//outputSlots+=Slot* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ItemGenerator
		public RuleCall getItemGeneratorParserRuleCall_0() { return cItemGeneratorParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//Buffer
		public RuleCall getBufferParserRuleCall_2() { return cBufferParserRuleCall_2; }
		
		//Conveyor
		public RuleCall getConveyorParserRuleCall_3() { return cConveyorParserRuleCall_3; }
		
		//Machine
		public RuleCall getMachineParserRuleCall_4() { return cMachineParserRuleCall_4; }
		
		//TurnTable cost=EInt '{' services+=Service* inputSlots+=Slot* outputSlots+=Slot* '}'
		public Group getGroup_5() { return cGroup_5; }
		
		//TurnTable
		public RuleCall getTurnTableParserRuleCall_5_0() { return cTurnTableParserRuleCall_5_0; }
		
		//cost=EInt
		public Assignment getCostAssignment_5_1() { return cCostAssignment_5_1; }
		
		//EInt
		public RuleCall getCostEIntParserRuleCall_5_1_0() { return cCostEIntParserRuleCall_5_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_2() { return cLeftCurlyBracketKeyword_5_2; }
		
		//services+=Service*
		public Assignment getServicesAssignment_5_3() { return cServicesAssignment_5_3; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_5_3_0() { return cServicesServiceParserRuleCall_5_3_0; }
		
		//inputSlots+=Slot*
		public Assignment getInputSlotsAssignment_5_4() { return cInputSlotsAssignment_5_4; }
		
		//Slot
		public RuleCall getInputSlotsSlotParserRuleCall_5_4_0() { return cInputSlotsSlotParserRuleCall_5_4_0; }
		
		//outputSlots+=Slot*
		public Assignment getOutputSlotsAssignment_5_5() { return cOutputSlotsAssignment_5_5; }
		
		//Slot
		public RuleCall getOutputSlotsSlotParserRuleCall_5_5_0() { return cOutputSlotsSlotParserRuleCall_5_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_6() { return cRightCurlyBracketKeyword_5_6; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCostEIntParserRuleCall_3_0 = (RuleCall)cCostAssignment_3.eContents().get(0);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Assignment cReliabilityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReliabilityEDoubleParserRuleCall_5_0 = (RuleCall)cReliabilityAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParametersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParametersParameterParserRuleCall_8_0 = (RuleCall)cParametersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Service:
		//	'service' name=ID
		//	'('
		//	cost=EInt
		//	processingTime=EInt
		//	reliability=EDouble
		//	')'
		//	'{'
		//	parameters+=Parameter*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID '(' cost=EInt processingTime=EInt reliability=EDouble ')' '{' parameters+=Parameter* '}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cost=EInt
		public Assignment getCostAssignment_3() { return cCostAssignment_3; }
		
		//EInt
		public RuleCall getCostEIntParserRuleCall_3_0() { return cCostEIntParserRuleCall_3_0; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//reliability=EDouble
		public Assignment getReliabilityAssignment_5() { return cReliabilityAssignment_5; }
		
		//EDouble
		public RuleCall getReliabilityEDoubleParserRuleCall_5_0() { return cReliabilityEDoubleParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//parameters+=Parameter*
		public Assignment getParametersAssignment_8() { return cParametersAssignment_8; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_8_0() { return cParametersParameterParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//	'name' name=ID
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'name' name=ID '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntrySlotCrossReference_1_0 = (CrossReference)cEntryAssignment_1.eContents().get(0);
		private final RuleCall cEntrySlotIDTerminalRuleCall_1_0_1 = (RuleCall)cEntrySlotCrossReference_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExitSlotCrossReference_3_0 = (CrossReference)cExitAssignment_3.eContents().get(0);
		private final RuleCall cExitSlotIDTerminalRuleCall_3_0_1 = (RuleCall)cExitSlotCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Connector:
		//	'{'
		//	entry=[Slot] '>' exit=[Slot]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' entry=[Slot] '>' exit=[Slot] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//entry=[Slot]
		public Assignment getEntryAssignment_1() { return cEntryAssignment_1; }
		
		//[Slot]
		public CrossReference getEntrySlotCrossReference_1_0() { return cEntrySlotCrossReference_1_0; }
		
		//ID
		public RuleCall getEntrySlotIDTerminalRuleCall_1_0_1() { return cEntrySlotIDTerminalRuleCall_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//exit=[Slot]
		public Assignment getExitAssignment_3() { return cExitAssignment_3; }
		
		//[Slot]
		public CrossReference getExitSlotCrossReference_3_0() { return cExitSlotCrossReference_3_0; }
		
		//ID
		public RuleCall getExitSlotIDTerminalRuleCall_3_0_1() { return cExitSlotIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Slot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Slot:
		//	'slot' name=ID
		//	'('
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'slot' name=ID '(' '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'slot'
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ItemGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.ItemGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGeneratesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneratedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cGeneratedTypeItemTypeCrossReference_2_1_0 = (CrossReference)cGeneratedTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cGeneratedTypeItemTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cGeneratedTypeItemTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ItemGenerator:
		//	'generator' name=ID ('generates' generatedType=[ItemType])?
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'generator' name=ID ('generates' generatedType=[ItemType])? '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'generator'
		public Keyword getGeneratorKeyword_0() { return cGeneratorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('generates' generatedType=[ItemType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'generates'
		public Keyword getGeneratesKeyword_2_0() { return cGeneratesKeyword_2_0; }
		
		//generatedType=[ItemType]
		public Assignment getGeneratedTypeAssignment_2_1() { return cGeneratedTypeAssignment_2_1; }
		
		//[ItemType]
		public CrossReference getGeneratedTypeItemTypeCrossReference_2_1_0() { return cGeneratedTypeItemTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getGeneratedTypeItemTypeIDTerminalRuleCall_2_1_0_1() { return cGeneratedTypeItemTypeIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWasteStoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cProductStoreParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCapacityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCapacityEIntParserRuleCall_1_1_0 = (RuleCall)cCapacityAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Store:
		//	WasteStore | ProductStore
		//	capacity=EInt
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//WasteStore | ProductStore capacity=EInt '{' '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WasteStore
		public RuleCall getWasteStoreParserRuleCall_0() { return cWasteStoreParserRuleCall_0; }
		
		//ProductStore capacity=EInt '{' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//ProductStore
		public RuleCall getProductStoreParserRuleCall_1_0() { return cProductStoreParserRuleCall_1_0; }
		
		//capacity=EInt
		public Assignment getCapacityAssignment_1_1() { return cCapacityAssignment_1_1; }
		
		//EInt
		public RuleCall getCapacityEIntParserRuleCall_1_1_0() { return cCapacityEIntParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class WasteStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.WasteStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWasteStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WasteStore:
		//	'wasteStore' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'wasteStore' name=ID
		public Group getGroup() { return cGroup; }
		
		//'wasteStore'
		public Keyword getWasteStoreKeyword_0() { return cWasteStoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ProductStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.ProductStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProductStore:
		//	'productStore' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'productStore' name=ID
		public Group getGroup() { return cGroup; }
		
		//'productStore'
		public Keyword getProductStoreKeyword_0() { return cProductStoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BufferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Buffer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBufferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Buffer:
		//	'buffer' name=ID
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'buffer' name=ID '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'buffer'
		public Keyword getBufferKeyword_0() { return cBufferKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Machine:
		//	'machine' name=ID
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConveyorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.Conveyor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConveyorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Conveyor:
		//	'conveyor' name=ID
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'conveyor' name=ID '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'conveyor'
		public Keyword getConveyorKeyword_0() { return cConveyorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TurnTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.TurnTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurntableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TurnTable:
		//	'turntable' name=ID
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'turntable' name=ID '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'turntable'
		public Keyword getTurntableKeyword_0() { return cTurntableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (=> '.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> '.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> '.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Stl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final SystemElements pSystem;
	private final NamedElementElements pNamedElement;
	private final AreaElements pArea;
	private final ItemTypeElements pItemType;
	private final ComponentElements pComponent;
	private final ServiceElements pService;
	private final ParameterElements pParameter;
	private final ConnectorElements pConnector;
	private final SlotElements pSlot;
	private final ItemGeneratorElements pItemGenerator;
	private final StoreElements pStore;
	private final WasteStoreElements pWasteStore;
	private final ProductStoreElements pProductStore;
	private final BufferElements pBuffer;
	private final MachineElements pMachine;
	private final ConveyorElements pConveyor;
	private final TurnTableElements pTurnTable;
	private final QualifiedNameElements pQualifiedName;
	private final EDoubleElements pEDouble;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pNamedElement = new NamedElementElements();
		this.pArea = new AreaElements();
		this.pItemType = new ItemTypeElements();
		this.pComponent = new ComponentElements();
		this.pService = new ServiceElements();
		this.pParameter = new ParameterElements();
		this.pConnector = new ConnectorElements();
		this.pSlot = new SlotElements();
		this.pItemGenerator = new ItemGeneratorElements();
		this.pStore = new StoreElements();
		this.pWasteStore = new WasteStoreElements();
		this.pProductStore = new ProductStoreElements();
		this.pBuffer = new BufferElements();
		this.pMachine = new MachineElements();
		this.pConveyor = new ConveyorElements();
		this.pTurnTable = new TurnTableElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEDouble = new EDoubleElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.Stl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	'system' name=ID
	//	'{'
	//	itemTypes+=ItemType+
	//	areas+=Area+
	//	'}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//NamedElement:
	//	Area | Service | Parameter | Component | ItemType | System;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//Area:
	//	'area' name=ID
	//	'{'
	//	components+=Component*
	//	connectors+=Connector*
	//	'}';
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//ItemType:
	//	'item' name=ID '='
	//	description=EString;
	public ItemTypeElements getItemTypeAccess() {
		return pItemType;
	}
	
	public ParserRule getItemTypeRule() {
		return getItemTypeAccess().getRule();
	}
	
	//Component:
	//	ItemGenerator | Store | Buffer | Conveyor | Machine | TurnTable
	//	cost=EInt
	//	'{'
	//	services+=Service*
	//	inputSlots+=Slot*
	//	outputSlots+=Slot*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Service:
	//	'service' name=ID
	//	'('
	//	cost=EInt
	//	processingTime=EInt
	//	reliability=EDouble
	//	')'
	//	'{'
	//	parameters+=Parameter*
	//	'}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Parameter:
	//	'name' name=ID
	//	'{'
	//	'}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Connector:
	//	'{'
	//	entry=[Slot] '>' exit=[Slot]
	//	'}';
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Slot:
	//	'slot' name=ID
	//	'('
	//	'{'
	//	'}';
	public SlotElements getSlotAccess() {
		return pSlot;
	}
	
	public ParserRule getSlotRule() {
		return getSlotAccess().getRule();
	}
	
	//ItemGenerator:
	//	'generator' name=ID ('generates' generatedType=[ItemType])?
	//	'{'
	//	'}';
	public ItemGeneratorElements getItemGeneratorAccess() {
		return pItemGenerator;
	}
	
	public ParserRule getItemGeneratorRule() {
		return getItemGeneratorAccess().getRule();
	}
	
	//Store:
	//	WasteStore | ProductStore
	//	capacity=EInt
	//	'{'
	//	'}';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//WasteStore:
	//	'wasteStore' name=ID;
	public WasteStoreElements getWasteStoreAccess() {
		return pWasteStore;
	}
	
	public ParserRule getWasteStoreRule() {
		return getWasteStoreAccess().getRule();
	}
	
	//ProductStore:
	//	'productStore' name=ID;
	public ProductStoreElements getProductStoreAccess() {
		return pProductStore;
	}
	
	public ParserRule getProductStoreRule() {
		return getProductStoreAccess().getRule();
	}
	
	//Buffer:
	//	'buffer' name=ID
	//	'{'
	//	'}';
	public BufferElements getBufferAccess() {
		return pBuffer;
	}
	
	public ParserRule getBufferRule() {
		return getBufferAccess().getRule();
	}
	
	//Machine:
	//	'machine' name=ID
	//	'{'
	//	'}';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//Conveyor:
	//	'conveyor' name=ID
	//	'{'
	//	'}';
	public ConveyorElements getConveyorAccess() {
		return pConveyor;
	}
	
	public ParserRule getConveyorRule() {
		return getConveyorAccess().getRule();
	}
	
	//TurnTable:
	//	'turntable' name=ID
	//	'{'
	//	'}';
	public TurnTableElements getTurnTableAccess() {
		return pTurnTable;
	}
	
	public ParserRule getTurnTableRule() {
		return getTurnTableAccess().getRule();
	}
	
	//QualifiedName:
	//	ID (=> '.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
